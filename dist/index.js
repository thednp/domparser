var NodeParser=function(){"use strict";var p=Object.defineProperty;var m=(l,a,c)=>a in l?p(l,a,{enumerable:!0,configurable:!0,writable:!0,value:c}):l[a]=c;var u=(l,a,c)=>m(l,typeof a!="symbol"?a+"":a,c);const l=new Set(["area","base","br","col","embed","hr","img","input","link","meta","param","source","track","wbr","path","circle","ellipse","line","rect","use","stop","polygon","polyline"]),a=d=>/^[a-zA-Z_][a-zA-Z_0-9]+$/.test(d)?d:`"${d}"`;class c{constructor(){u(this,"tags",new Set);u(this,"components",new Set);u(this,"root",{nodeName:"#document",attributes:{},children:[]});u(this,"stack",[this.root]);u(this,"currentNode",this.root)}parseFromString(i){const t=this.tokenize(i);return this.parseTokens(t),{root:this.root,components:Array.from(this.components),tags:Array.from(this.tags)}}tokenize(i){const t=[];let e="",s=!1,n=!1,f=34;for(let o=0;o<i.length;o++){const r=i.charCodeAt(o);if(s&&(r===34||r===39)){n?r===f&&(n=!1):(n=!0,f=r),e+=String.fromCharCode(r);continue}if(r===60&&!n){const h=e.trim();h&&t.push({type:"text",value:h,isSelfClosing:!1}),e="",s=!0}else if(r===62&&!n){if(e){const h=e.endsWith("/");h&&(e=e.slice(0,-1)),t.push({type:"tag",value:e.trim(),isSelfClosing:h})}e="",s=!1}else e+=String.fromCharCode(r)}return e.trim()&&t.push({type:"text",value:e.trim(),isSelfClosing:!1}),t}parseTokens(i){this.root={nodeName:"#document",attributes:{},children:[]},this.stack=[this.root],this.currentNode=this.root;for(const t of i){if(t.type==="text"){const o={nodeName:"#text",attributes:{},children:[],value:t.value};this.currentNode.children.push(o);continue}const e=t.value.startsWith("/"),s=e?t.value.slice(1):this.getTagName(t.value),n=t.isSelfClosing||l.has(s);if(s[0].toUpperCase()===s[0]||s.includes("-")?this.components.add(s):this.tags.add(s),e)!n&&this.stack.length>1&&(this.stack.pop(),this.currentNode=this.stack[this.stack.length-1]);else{const o={tagName:s,nodeName:s.toUpperCase(),attributes:this.getAttributes(t.value),children:[]};this.currentNode.children.push(o),n||(this.stack.push(o),this.currentNode=o)}}}getTagName(i){return i.split(/[\s/>]/)[0]}getAttributes(i){const t={},e=/([^\s=]+)(?:=(?:"([^"]*)"|'([^']*)'|([^\s"']+)))?/g,s=i.split(/\s+/);if(s.length<2)return t;const n=i.slice(s[0].length);let f;for(;(f=e.exec(n))!==null;){const[,o,r,h,g]=f;o&&o!=="/"&&(t[o]=r||h||g||"")}return t}}return u(c,"selfClosingTags",l),u(c,"quoteText",a),c}();
//# sourceMappingURL=index.js.map
