{"version":3,"sources":["../src/parts/util.ts"],"sourcesContent":["// util.ts\nimport type {\n  ChildLike,\n  ChildNode,\n  DOMNode,\n  GetAttributesOptions,\n  HTMLToken,\n  NodeLike,\n  NodeLikeAttributes,\n  RootLike,\n  RootNode,\n  TokenizerOptions,\n} from \"./types.ts\";\n\n// general utils\n\nexport const ATTR_REGEX = /([^\\s=]+)(?:=(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"']+)))?/g;\n\n/**\n * Get attributes from a string token and return an object\n * @param token the string token\n * @returns the attributes object\n */\nexport const getBaseAttributes = (token: string) => {\n  const attrs: NodeLikeAttributes = {};\n  const [tagName, ...parts] = token.split(/\\s+/);\n  if (parts.length < 1) return attrs;\n\n  const attrStr = token.slice(tagName.length);\n  let match: RegExpExecArray | null;\n\n  while ((match = ATTR_REGEX.exec(attrStr))) {\n    const [, name, d, s, u] = match;\n    name !== \"/\" && (attrs[name] = d ?? s ?? u ?? \"\");\n  }\n\n  return attrs;\n};\n\n/**\n * Get attributes from a string token and return an object.\n * In addition to the base tool, this also filters configured\n * unsafe attributes.\n * @param tagStr the string token\n * @param config an optional set of options\n * @returns the attributes object\n */\nexport const getAttributes = (\n  tagStr: string,\n  config?: Partial<GetAttributesOptions>,\n): NodeLikeAttributes => {\n  const { unsafeAttrs } = config || {};\n  const baseAttrs = getBaseAttributes(tagStr);\n  const attrs: NodeLikeAttributes = {};\n\n  for (const [key, value] of Object.entries(baseAttrs)) {\n    if (!unsafeAttrs || !unsafeAttrs?.has(toLowerCase(key))) {\n      attrs[key] = value;\n    }\n  }\n\n  return attrs;\n};\n\n/**\n * Converts a string to lowercase.\n * @param str The string to convert.\n * @returns The lowercase string.\n */\nexport const toLowerCase = (str: string): string => str.toLowerCase();\n\n/**\n * Converts a string to uppercase.\n * @param str The string to convert.\n * @returns The uppercase string.\n */\nexport const toUpperCase = (str: string): string => str.toUpperCase();\n\n/**\n * Checks if a string starts with a specified prefix.\n * @param str The string to check.\n * @param prefix The prefix to search for.\n * @param position The position to start looking from.\n * @returns `true` if the string starts with the prefix, `false` otherwise.\n */\nexport const startsWith = (\n  str: string,\n  prefix: string,\n  position?: number,\n): boolean => str.startsWith(prefix, position);\n\n/**\n * Checks if a string ends with a specified suffix.\n * @param str The string to check.\n * @param suffix The suffix to search for.\n * @param position The position to start looking from.\n * @returns `true` if the string ends with the suffix, `false` otherwise.\n */\nexport const endsWith = (\n  str: string,\n  suffix: string,\n  position?: number,\n): boolean => str.endsWith(suffix, position);\n\n/**\n * Creates a string from a character code.\n * @param char The character code.\n * @returns The string representation of the character code.\n */\nexport const fromCharCode = (char: number): string => String.fromCharCode(char);\n\n/**\n * Returns the character code at a specific index in a string.\n * @param str The string to check.\n * @param index The index of the character to get the code for.\n * @returns The character code at the specified index.\n */\nexport const charCodeAt = (str: string, index: number): number =>\n  str.charCodeAt(index);\n\n/**\n * Defines a property on an object.\n * @param obj The object to define the property on.\n * @param propName The name of the property.\n * @param desc The property descriptor.\n * @returns The object after defining the property.\n */\n// export const defineProperty = <T extends Record<string, unknown>>(\n//   obj: T,\n//   propName: PropertyKey,\n//   desc: PropertyDescriptor,\n// ): T => Object.defineProperty(obj, propName, desc);\n\n/**\n * Defines multiple properties on an object.\n * @param obj The object to define properties on.\n * @param props An object where keys are property names and values are property descriptors.\n * @returns The object after defining the properties.\n */\nexport const defineProperties = <T extends Record<string, unknown>>(\n  obj: T,\n  props: Record<PropertyKey, PropertyDescriptor>,\n): T => Object.defineProperties(obj, props);\n\n// Type guards\n\n/**\n * Checks if a node is an object.\n * @param node The object to check.\n * @returns `true` if the node is an object, `false` otherwise.\n */\nexport const isObj = (node: unknown) =>\n  node !== null && typeof node === \"object\";\n\n/**\n * Checks if a node is a root object (`RootNode` or `RootLike`).\n * @param node The object to check.\n * @returns `true` if the node is an object, `false` otherwise.\n */\nexport const isRoot = (\n  node: RootLike | RootNode | ChildLike | ChildNode,\n): node is RootLike | RootNode =>\n  isObj(node) && isNode(node as unknown as ChildLike) &&\n  node.nodeName === \"#document\";\n\n/**\n * Checks if a node is a tag node (`NodeLike` or `DOMNode`).\n * @param node The node to check.\n * @returns `true` if the node is a tag node, `false` otherwise.\n */\nexport const isTag = (\n  node: ChildLike | ChildNode,\n): node is NodeLike | DOMNode => isObj(node) && \"tagName\" in node;\n\n/**\n * Checks if a node is a root node (`RootLike` or `RootNode`),\n * a tag node (`NodeLike` or `DOMNode`), a comment node\n * (`CommentLike` or `CommentNode`) or text node (`TextLike` or `TextNode`).\n * @param node The node to check.\n * @returns `true` if the node is a tag node, `false` otherwise.\n */\nexport const isNode = (\n  node: ChildLike | ChildNode | NodeLikeAttributes | string | number,\n): node is ChildLike | NodeLike | DOMNode => isObj(node) && \"nodeName\" in node;\n\n/**\n * Checks if a value is a primitive (number or string).\n * @param val The value to check.\n * @returns `true` if the value is a primitive, `false` otherwise.\n */\nexport const isPrimitive = <T extends (number | string)>(\n  val: unknown,\n): val is T => typeof val === \"string\" || typeof val === \"number\";\n\n/**\n * Trim a string value.\n * @param str A string value\n * @returns The trimmed value of the same string.\n */\nexport const trim = (str: string) => str.trim();\n\n/**\n * Set of self-closing HTML tags used by the `Parser`.\n */\nexport const selfClosingTags = new Set([\n  \"?xml\",\n  \"area\",\n  \"base\",\n  \"br\",\n  \"col\",\n  \"embed\",\n  \"hr\",\n  \"img\",\n  \"input\",\n  \"link\",\n  \"meta\",\n  \"param\",\n  \"source\",\n  \"track\",\n  \"wbr\",\n  \"path\",\n  \"circle\",\n  \"ellipse\",\n  \"line\",\n  \"rect\",\n  \"use\",\n  \"stop\",\n  \"polygon\",\n  \"polyline\",\n]);\n\nexport const escape = (str: string) => {\n  if ((str === null) || (str === \"\")) {\n    return \"\";\n  } else {\n    str = str.toString();\n  }\n\n  const map: Record<string, string> = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#039;\",\n  };\n\n  return str.replace(/[&<>\"']/g, (m) => {\n    return map[m];\n  });\n};\n\nexport const DOM_ERROR = \"DomParserError:\";\nconst DEFAULT_CHUNK_SIZE = 64 * 1024; // 65536 = 64KB\nconst DEFAULT_MAX_SCRIPT_SIZE = 128 * 1024; // 131072 = 128KB\n\n/**\n * Tokenizes an HTML string into an array of HTML tokens.\n * These tokens represent opening tags, closing tags, text content, and comments.\n * @param html The HTML string to tokenize.\n * @returns An array of `HTMLToken` objects.\n */\nexport const tokenize = (\n  html: string,\n  options: TokenizerOptions = {},\n): HTMLToken[] => {\n  const {\n    maxScriptSize = DEFAULT_MAX_SCRIPT_SIZE,\n    chunkSize = DEFAULT_CHUNK_SIZE,\n  } = options;\n\n  const specialTags = [\"script\", \"style\"] as const;\n  const tokens: HTMLToken[] = [];\n  const len = html.length;\n  const COM_START = [\"!--\", \"![CDATA[\"];\n  const COM_END = [\"--\", \"]]\"];\n  let COM_TYPE = 0; // [0 = #comment, 1 = CDATA]\n\n  let token = \"\";\n  let scriptContent = \"\";\n  let inTag = false;\n  let inQuote = false;\n  let quote = 0;\n  let inPre = false;\n  let inTemplate = false;\n  let inComment = false;\n  let inStyleScript = false;\n  let currentChunkStart = 0;\n\n  while (currentChunkStart < len) {\n    const chunkEnd = Math.min(currentChunkStart + chunkSize, len);\n    const chunk = html.slice(currentChunkStart, chunkEnd);\n\n    for (let i = 0; i < chunk.length; i++) {\n      const globalIndex = currentChunkStart + i;\n      const char = charCodeAt(chunk, i);\n\n      if (inStyleScript) {\n        const endSpecialTag = specialTags.find((t) =>\n          startsWith(html, `/${t}`, globalIndex + 1)\n        );\n\n        if (char === 60 && endSpecialTag && !inTemplate && !inQuote) { // <\n          // istanbul ignore else @preserve\n          if (scriptContent.length < maxScriptSize) {\n            tokens.push({\n              tokenType: \"text\",\n              value: trim(scriptContent),\n              isSC: false,\n            });\n          }\n          tokens.push({\n            tokenType: \"tag\",\n            value: \"/\" + endSpecialTag,\n            isSC: false,\n          });\n          scriptContent = \"\";\n          inStyleScript = false;\n          i += endSpecialTag.length + 2;\n        } else {\n          // istanbul ignore next @preserve - don't crash the test!!\n          if (scriptContent.length >= maxScriptSize) {\n            // Once we hit the limit, just skip content until closing tag\n            continue;\n          }\n          if (char === 96) { // ` | 0x60\n            inTemplate = !inTemplate;\n            // \" or ' | 0x22 or 0x27\n          } else if (!inTemplate && (char === 34 || char === 39)) {\n            // istanbul ignore else @preserve\n            if (!inQuote) {\n              quote = char;\n              inQuote = true;\n            } else if (char === quote) {\n              inQuote = false;\n            }\n          }\n          scriptContent += fromCharCode(char);\n        }\n        continue;\n      }\n\n      if (inComment) {\n        token += fromCharCode(char);\n        if (\n          endsWith(token, COM_END[COM_TYPE]) &&\n          charCodeAt(html, globalIndex + 1) === 62\n        ) { // >\n          const tokenValue = COM_TYPE === 1 ? escape(token) : token;\n          tokens.push({\n            tokenType: \"comment\",\n            value: `<${trim(tokenValue)}>`,\n            isSC: false,\n          });\n          inComment = false;\n          token = \"\";\n          i += 1;\n        }\n        continue;\n      }\n\n      if (\n        (inTag && token.includes(\"=\")) &&\n        (char === 34 || char === 39)\n      ) {\n        if (!inQuote) {\n          quote = char;\n          inQuote = true;\n        } else if (char === quote) {\n          inQuote = false;\n        }\n        token += fromCharCode(char);\n        continue;\n      }\n\n      if (\n        char === 60 && !inQuote && !inTemplate\n      ) { // 0x3c | \"<\"\n        const value = trim(token);\n        value &&\n          tokens.push({\n            tokenType: \"text\",\n            value: inPre ? token : value,\n            isSC: false,\n          });\n        token = \"\";\n\n        const commentStart = COM_START.find((cs) =>\n          startsWith(html, cs, globalIndex + 1)\n        );\n        if (commentStart) {\n          COM_TYPE = COM_START.indexOf(commentStart);\n          inComment = true;\n          token += commentStart;\n          i += commentStart.length;\n          continue;\n        }\n\n        inTag = true;\n      } else if (\n        char === 62 && inTag && !inTemplate\n      ) { // 0x3e | \">\"\n        if (token === \"/pre\") {\n          inPre = false;\n        } else if (token === \"pre\" || startsWith(token, \"pre\")) {\n          inPre = true;\n        }\n        const startSpecialTag = specialTags.find((t) =>\n          t === token || startsWith(token, t)\n        );\n        if (startSpecialTag && !endsWith(token, \"/\")) {\n          inStyleScript = true;\n        }\n\n        const isDocType = startsWith(toLowerCase(token), \"!doctype\");\n\n        // istanbul ignore else @preserve\n        if (token) {\n          const isSC = endsWith(token, \"/\");\n          const [tagName] = token.split(/\\s/);\n          const value = inQuote ? tagName + (isSC ? \"/\" : \"\") : token;\n          tokens.push({\n            tokenType: isDocType ? \"doctype\" : \"tag\",\n            value: isSC ? trim(value.slice(0, -1)) : trim(value),\n            isSC,\n          });\n        }\n        token = \"\";\n        inTag = false;\n        inQuote = false;\n      } else {\n        token += fromCharCode(char);\n      }\n    }\n    currentChunkStart = chunkEnd;\n  }\n\n  const lastToken = trim(token);\n  if (lastToken) {\n    tokens.push({\n      tokenType: \"text\",\n      value: lastToken,\n      isSC: false,\n    });\n  }\n\n  return tokens;\n};\n"],"mappings":"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","names":[]}