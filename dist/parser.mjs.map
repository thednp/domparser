{"version":3,"sources":["../src/parts/util.ts","../src/parts/parser.ts"],"sourcesContent":["// util.ts\nimport type {\n  ChildLike,\n  ChildNode,\n  DOMNode,\n  GetAttributesOptions,\n  HTMLToken,\n  NodeLike,\n  NodeLikeAttributes,\n  RootLike,\n  RootNode,\n} from \"./types.ts\";\n\n// general utils\n\nexport const ATTR_REGEX = /([^\\s=]+)(?:=(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"']+)))?/g;\n\n/**\n * Get attributes from a string token and return an object\n * @param tagStr the string token\n * @returns the attributes object\n */\nexport const getBaseAttributes = (tagStr: string) => {\n  const attrs: NodeLikeAttributes = {};\n  const parts = tagStr.split(/\\s+/);\n  if (parts.length < 2) return attrs;\n\n  const attrStr = tagStr.slice(parts[0].length);\n  let match: RegExpExecArray | null;\n\n  while ((match = ATTR_REGEX.exec(attrStr))) {\n    const [, name, d, s, u] = match;\n    name !== \"/\" && (attrs[name] = d ?? s ?? u ?? \"\");\n  }\n\n  return attrs;\n};\n\n/**\n * Get attributes from a string token and return an object.\n * In addition to the base tool, this also filters configured\n * unsafe attributes.\n * @param tagStr the string token\n * @param config an optional set of options\n * @returns the attributes object\n */\nexport const getAttributes = (\n  tagStr: string,\n  config?: Partial<GetAttributesOptions>,\n): NodeLikeAttributes => {\n  const { unsafeAttrs } = config || {};\n  const baseAttrs = getBaseAttributes(tagStr);\n  const attrs: NodeLikeAttributes = {};\n\n  for (const [key, value] of Object.entries(baseAttrs)) {\n    if (!unsafeAttrs || !unsafeAttrs?.has(toLowerCase(key))) {\n      attrs[key] = value;\n    }\n  }\n\n  return attrs;\n};\n\n/**\n * Converts a string to lowercase.\n * @param str The string to convert.\n * @returns The lowercase string.\n */\nexport const toLowerCase = (str: string): string => str.toLowerCase();\n\n/**\n * Converts a string to uppercase.\n * @param str The string to convert.\n * @returns The uppercase string.\n */\nexport const toUpperCase = (str: string): string => str.toUpperCase();\n\n/**\n * Checks if a string starts with a specified prefix.\n * @param str The string to check.\n * @param prefix The prefix to search for.\n * @param position The position to start looking from.\n * @returns `true` if the string starts with the prefix, `false` otherwise.\n */\nexport const startsWith = (\n  str: string,\n  prefix: string,\n  position?: number,\n): boolean => str.startsWith(prefix, position);\n\n/**\n * Checks if a string ends with a specified suffix.\n * @param str The string to check.\n * @param suffix The suffix to search for.\n * @param position The position to start looking from.\n * @returns `true` if the string ends with the suffix, `false` otherwise.\n */\nexport const endsWith = (\n  str: string,\n  suffix: string,\n  position?: number,\n): boolean => str.endsWith(suffix, position);\n\n/**\n * Creates a string from a character code.\n * @param char The character code.\n * @returns The string representation of the character code.\n */\nexport const fromCharCode = (char: number): string => String.fromCharCode(char);\n\n/**\n * Returns the character code at a specific index in a string.\n * @param str The string to check.\n * @param index The index of the character to get the code for.\n * @returns The character code at the specified index.\n */\nexport const charCodeAt = (str: string, index: number): number =>\n  str.charCodeAt(index);\n\n/**\n * Defines a property on an object.\n * @param obj The object to define the property on.\n * @param propName The name of the property.\n * @param desc The property descriptor.\n * @returns The object after defining the property.\n */\n// export const defineProperty = <T extends Record<string, unknown>>(\n//   obj: T,\n//   propName: PropertyKey,\n//   desc: PropertyDescriptor,\n// ): T => Object.defineProperty(obj, propName, desc);\n\n/**\n * Defines multiple properties on an object.\n * @param obj The object to define properties on.\n * @param props An object where keys are property names and values are property descriptors.\n * @returns The object after defining the properties.\n */\nexport const defineProperties = <T extends Record<string, unknown>>(\n  obj: T,\n  props: Record<PropertyKey, PropertyDescriptor>,\n): T => Object.defineProperties(obj, props);\n\n// Type guards\n\n/**\n * Checks if a node is an object.\n * @param node The object to check.\n * @returns `true` if the node is an object, `false` otherwise.\n */\nexport const isObj = (node: unknown) =>\n  node !== null && typeof node === \"object\";\n\n/**\n * Checks if a node is a root object (`RootNode` or `RootLike`).\n * @param node The object to check.\n * @returns `true` if the node is an object, `false` otherwise.\n */\nexport const isRoot = (\n  node: RootLike | RootNode | ChildLike | ChildNode,\n): node is RootLike | RootNode =>\n  isObj(node) && isNode(node as unknown as ChildLike) &&\n  node.nodeName === \"#document\";\n\n/**\n * Checks if a node is a tag node (`NodeLike` or `DOMNode`).\n * @param node The node to check.\n * @returns `true` if the node is a tag node, `false` otherwise.\n */\nexport const isTag = (\n  node: ChildLike | ChildNode,\n): node is NodeLike | DOMNode => isObj(node) && \"tagName\" in node;\n\n/**\n * Checks if a node is a root node (`RootLike` or `RootNode`),\n * a tag node (`NodeLike` or `DOMNode`), a comment node\n * (`CommentLike` or `CommentNode`) or text node (`TextLike` or `TextNode`).\n * @param node The node to check.\n * @returns `true` if the node is a tag node, `false` otherwise.\n */\nexport const isNode = (\n  node: ChildLike | ChildNode | NodeLikeAttributes | string | number,\n): node is ChildLike | NodeLike | DOMNode => isObj(node) && \"nodeName\" in node;\n\n/**\n * Checks if a value is a primitive (number or string).\n * @param val The value to check.\n * @returns `true` if the value is a primitive, `false` otherwise.\n */\nexport const isPrimitive = <T extends (number | string)>(\n  val: unknown,\n): val is T => typeof val === \"string\" || typeof val === \"number\";\n\n/**\n * Trim a string value.\n * @param str A string value\n * @returns The trimmed value of the same string.\n */\nexport const trim = (str: string) => str.trim();\n\n/**\n * Set of self-closing HTML tags used by the `Parser`.\n */\nexport const selfClosingTags = new Set([\n  \"area\",\n  \"base\",\n  \"br\",\n  \"col\",\n  \"embed\",\n  \"hr\",\n  \"img\",\n  \"input\",\n  \"link\",\n  \"meta\",\n  \"param\",\n  \"source\",\n  \"track\",\n  \"wbr\",\n  \"path\",\n  \"circle\",\n  \"ellipse\",\n  \"line\",\n  \"rect\",\n  \"use\",\n  \"stop\",\n  \"polygon\",\n  \"polyline\",\n]);\n\nexport const escape = (str: string) => {\n  if ((str === null) || (str === \"\")) {\n    return false;\n  } else {\n    str = str.toString();\n  }\n\n  const map: Record<string, string> = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#039;\",\n  };\n\n  return str.replace(/[&<>\"']/g, (m) => {\n    return map[m];\n  });\n};\n\n/**\n * Tokenizes an HTML string into an array of HTML tokens.\n * These tokens represent opening tags, closing tags, text content, and comments.\n * @param html The HTML string to tokenize.\n * @returns An array of `HTMLToken` objects.\n */\nexport const tokenize = (html: string): HTMLToken[] => {\n  const specialTags = [\"script\", \"style\"];\n  const tokens: HTMLToken[] = [];\n  const len = html.length;\n  let token = \"\",\n    inTag = false,\n    inQuote = false,\n    quote = 0,\n    inTemplate = false,\n    inComment = false,\n    inCDATA = false,\n    inStyleScript = false;\n\n  for (let i = 0; i < len; i++) {\n    const char = charCodeAt(html, i);\n\n    if (inComment) {\n      token += fromCharCode(char);\n      /* istanbul ignore else @preserve */\n      if (endsWith(token, \"--\") && charCodeAt(html, i + 1) === 62 /* > */) {\n        tokens.push({\n          nodeType: \"comment\",\n          value: `<${trim(token)}>`,\n          isSC: false,\n        });\n        inComment = false;\n        token = \"\";\n        i += 1;\n      }\n      continue;\n    }\n\n    if (inCDATA) {\n      token += fromCharCode(char);\n      /* istanbul ignore else @preserve */\n      if (endsWith(token, \"]]\") && charCodeAt(html, i + 1) === 62 /* > */) {\n        tokens.push({\n          nodeType: \"text\",\n          value: `<${escape(trim(token))}>`,\n          isSC: false,\n        });\n        inCDATA = false;\n        token = \"\";\n        i += 1;\n      }\n      continue;\n    }\n\n    if (inStyleScript) {\n      const endSpecialTag = specialTags.find((t) =>\n        startsWith(html, `/${t}`, i + 1)\n      );\n      if (char === 60 && endSpecialTag && !inTag && !inTemplate && !inQuote) { // <\n        inStyleScript = false;\n      }\n      if (char === 96) { // ` | 0x60\n        inTemplate = !inTemplate;\n      }\n    }\n\n    // \" or ' | 0x22 or 0x27\n    if (\n      (inTag && token.includes(\"=\") || inStyleScript) &&\n      (char === 34 || char === 39)\n    ) {\n      if (!inQuote) {\n        quote = char;\n        inQuote = true;\n      } else if (char === quote) {\n        inQuote = false;\n      }\n\n      token += fromCharCode(char);\n      continue;\n    }\n\n    // else\n    if (char === 60 && !inQuote && !inTemplate && !inStyleScript) { // <\n      trim(token) &&\n        tokens.push({\n          nodeType: \"text\",\n          value: trim(token),\n          isSC: false,\n        });\n      token = \"\";\n      inTag = true;\n\n      if (startsWith(html, \"!--\", i + 1)) {\n        inComment = true;\n        token += \"!--\";\n        i += 3;\n        continue;\n      }\n      if (startsWith(html, \"![CDATA[\", i + 1)) {\n        inCDATA = true;\n        token += \"![CDATA[\";\n        i += 8;\n        continue;\n      }\n    } else if (\n      char === 62 && inTag && !inQuote && !inTemplate && !inComment &&\n      !inStyleScript && !inCDATA\n    ) { // >\n      const startSpecialTag = specialTags.find((t) =>\n        t === token || startsWith(token, t)\n      );\n      if (startSpecialTag) {\n        inStyleScript = true;\n      }\n      // handle doctype tag\n      const isDocType = startsWith(toLowerCase(token), \"!doctype\");\n      /* istanbul ignore else @preserve */\n      if (token) {\n        const isSC = endsWith(token, \"/\");\n        tokens.push({\n          nodeType: isDocType ? \"doctype\" : \"tag\",\n          value: isSC ? trim(token.slice(0, -1)) : trim(token),\n          isSC,\n        });\n      }\n      token = \"\";\n      inTag = false;\n    } else {\n      token += fromCharCode(char);\n    }\n  }\n\n  trim(token) &&\n    tokens.push({ nodeType: \"text\", value: trim(token), isSC: false });\n\n  return tokens;\n};\n\nexport const DOM_ERROR = \"DomParserError:\";\n","import {\n  getBaseAttributes,\n  selfClosingTags,\n  tokenize,\n  toLowerCase,\n  toUpperCase,\n} from \"./util.ts\";\nimport type {\n  CommentLike,\n  NodeLike,\n  ParseResult,\n  RootLike,\n  TextLike,\n} from \"./types\";\n\n/**\n * **Parser**\n *\n * A tiny yet very fast and powerful parser that takes a string of HTML\n * and returns a DOM tree representation. In benchmarks it shows up to\n * 60x faster performance when compared to jsdom.\n *\n * The DOM representation is a plain object with the following structure:\n * ```ts\n *  type CommentLike = {\n *   nodeName: \"#comment\";\n *   nodeValue: string;\n *  };\n *  type TextLike = {\n *   nodeName: \"#text\";\n *   nodeValue: string;\n *  };\n *  type NodeLike = {\n *   tagName: string;\n *   nodeName: string;\n *   attributes: Record<string, string>;\n *   children: NodeLike[];\n *  };\n *  // the root node\n *  type RootLike = {\n *   nodeName: string;\n *   children: NodeLike[];\n * };\n * ```\n *\n * @example\n * ```ts\n * const { root, components, tags } = Parser().parseFromString(\"<h1>Title</h1>\");\n * // > \"root\" is a RootLike node,\n * // > \"components\" is an array of component names,\n * // > \"tags\" is an array of tag names.\n * ```\n *\n * @returns The result of the parser.\n */\nexport function Parser() {\n  return {\n    parseFromString(htmlString?: string): ParseResult {\n      const root: RootLike = { nodeName: \"#document\", children: [] };\n      if (!htmlString) return { root, tags: [], components: [] };\n\n      const stack: (RootLike | NodeLike)[] = [root];\n      const components = new Set<string>();\n      const tags = new Set<string>();\n\n      tokenize(htmlString).forEach((token) => {\n        const { nodeType, value, isSC } = token;\n        const currentParent = stack[stack.length - 1];\n        if (nodeType === \"doctype\") return;\n\n        if ([\"text\", \"comment\"].includes(nodeType)) {\n          currentParent.children.push(\n            {\n              nodeName: `#${nodeType}`,\n              nodeValue: value,\n            } as CommentLike | TextLike,\n          );\n          return;\n        }\n\n        const isClosing = value.startsWith(\"/\");\n        const tagName = isClosing ? value.slice(1) : value.split(/[\\s/>]/)[0];\n        const tagNameLower = toLowerCase(tagName);\n        const isSelfClosing = isSC ||\n          selfClosingTags.has(tagNameLower);\n\n        // Register tag type\n        (tagName[0] === toUpperCase(tagName[0]) ||\n            tagName.includes(\"-\")\n          ? components\n          : tags).add(tagName);\n\n        if (!isClosing) {\n          const node: NodeLike = {\n            tagName,\n            nodeName: toUpperCase(tagName),\n            attributes: getBaseAttributes(value),\n            children: [],\n          };\n\n          currentParent.children.push(node);\n          !isSelfClosing && stack.push(node);\n        } else if (!isSelfClosing && stack.length > 1) {\n          stack.pop();\n        }\n      });\n\n      return {\n        root,\n        components: Array.from(components),\n        tags: Array.from(tags),\n      };\n    },\n  };\n}\n"],"mappings":"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","names":[]}