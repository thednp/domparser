{"version":3,"sources":["../src/parts/dom.ts","../src/parts/util.ts","../src/parts/parser.ts","../src/parts/selectors.ts","../src/parts/prototype.ts","../src/parts/sanitize.ts"],"sourcesContent":["// dom.ts\nimport { addDomPrototype, createDocument } from \"./prototype\";\nimport { Parser } from \"./parser\";\nimport { DOM_ERROR, isObj, isRoot } from \"./util\";\nimport { sanitizeAttrValue } from \"./sanitize\";\nimport type { ParserOptions, RootLike, RootNode } from \"./types\";\n\nexport { createDocument };\n\n/**\n * **Dom**\n *\n * Creates a new `Document` like instance with DOM-like methods and properties and populates\n * it with nodes resulted from the parsing of a given HTML markup.\n *\n * **Features**\n * * It uses the **Parser** to quickly create a DOM tree.\n * * It pushes into the **Parser** options for basic sanitization to all children attributes.\n * * It also sets `onNodeCallback` to override the **Parser**'s ability to store the DOM tree.\n * * It adds basic selector engine to the `RootNode` and all `DOMLike` nodes.\n * * It adds `Element` like methods to new `DOMLike` nodes, EG: `ownerDocument`, `parentNode`,\n * `matches`, `closest`, `getAttribute`, `innerHTML` and others.\n *\n * The DOM representation is a plain object with the following structure:\n * ```ts\n *  type TextNode = {\n *   nodeName: \"#text\";\n *   ownerDocument: RootNode;\n *   parentNode: RootNode | DOMNode;\n *   textContent: string;\n *   nodeValue: string;\n *   remove: () => void;\n * };\n *  type DOMNode = {\n *   tagName: string;\n *   nodeName: string;\n *   textContent: string;\n *   innerHTML: string;\n *   outerHTML: string;\n *   attributes: Map<string, string>;\n *   hasAttribute: (attrName: string) => boolean;\n *   getAttribute: (attrName: string) => string;\n *   setAttribute: (attrName: string, attrValue: string) => void;\n *   hasAttributeNS: (ns: string, attrName: string) => boolean;\n *   getAttributeNS: (ns: string, attrName: string) => string;\n *   setAttributeNS: (ns: string, attrName: string, attrValue: string) => void;\n *   remove: void;\n *   removeChild: (childNode: DOMNode | TextNode | CommentNode) => void;\n *   append: (childNode: DOMNode | TextNode | CommentNode) => void;\n *   replaceChildren: (...newChildren: DOMNode[]) => void;\n *   children: DOMNode[];\n *   childNodes: (DOMNode | TextNode | CommentNode)[];\n *   contains: (childNode: DOMNode) => boolean;\n *   matches: (selector: string) => boolean;\n *   closest: (selector: string) => DOMNode | null;\n *   ownerDocument: RootNode;\n *   parentNode: RootNode | DOMNode;\n *   querySelector: (selector: string) => DOMNode | null;\n *   querySelectorAll: (selector: string) => DOMNode[];\n *   getElementsByClassName: (className: string) => DOMNode[];\n *   getElementsByTagName: (tagName: string) => DOMNode[];\n * };\n *\n *  // this is the return of Dom()\n *  type RootNode = {\n *   nodeName: string;\n *   doctype?: string;\n *   charset?: string;\n *   documentElement: DOMNode | null;\n *   head: DOMNode | null;\n *   body: DOMNode | null;\n *   all: DOMNode[];\n *   children: DOMNode[];\n *   childNodes: (DOMNode | TextNode | CommentNode)[];\n *   createElement: (tagName: string, first: Attributes | DOMNode, ...childNodes: (DOMNode | TextNode)[]);\n *   createElementNS: (ns: string, tagName: string, first: Attributes | DOMNode, ...childNodes: (DOMNode | TextNode)[]);\n *   createTextNode: (content: string) => TextNode;\n *   createComment: (content: string) => CommentNode;\n *   removeChild: (childNode: DOMNode | TextNode | CommentNode) => void;\n *   replaceChildren: (...newChildren: DOMNode[]) => void;\n *   append: (childNode: DOMNode | TextNode | CommentNode) => void;\n *   contains: (childNode: DOMNode) => boolean;\n *   getElementById: (id: string) => DOMNode | null;\n *   querySelector: (selector: string) => DOMNode | null;\n *   querySelectorAll: (selector: string) => DOMNode[];\n *   getElementsByClassName: (className: string) => DOMNode[];\n *   getElementsByTagName: (tagName: string) => DOMNode[];\n *   register: (node: DOMNode) => void;\n *   deregister: (node: DOMNode) => void;\n * };\n * ```\n *\n * @example\n * ```ts\n * const config = {\n *   // Sanitize function\n *   sanitizeFn?: myFunction(attrName: string, attrValue: string) => string,\n *   // Sanitize function\n *   onNodeCallback?: myFunction(node: NodeLike) => void,\n *   // Common dangerous tags that could lead to XSS attacks\n *   filterTags: [\n *     \"script\", \"style\", \"iframe\", \"object\", \"embed\", \"base\", \"form\",\n *     \"input\", \"button\", \"textarea\", \"select\", \"option\"\n *   ],\n *   // Unsafe attributes that could lead to XSS attacks\n *   filterAttrs: [\n *     \"onerror\", \"onload\", \"onunload\", \"onclick\", \"ondblclick\", \"onmousedown\",\n *     \"onmouseup\", \"onmouseover\", \"onmousemove\", \"onmouseout\", \"onkeydown\",\n *     \"onkeypress\", \"onkeyup\", \"onchange\", \"onsubmit\", \"onreset\", \"onselect\",\n *     \"onblur\", \"onfocus\", \"formaction\", \"href\", \"xlink:href\", \"action\"\n *   ]\n * }\n * const doc = Dom(\"<!doctype html><html>This is starting html</html>\", config);\n * console.log(doc.documentElement.outerHTML);\n * // > \"<html>This is starting html</html>\"\n * ```\n *\n * @param startHTML Initial HTML content\n * @param config the `Parser` options to apply to the parsing of the startHTML markup.\n * @returns The `Document` like root node\n */\nexport const Dom = (\n  startHTML: string | undefined = undefined,\n  config: Partial<ParserOptions> = {},\n): RootNode => {\n  if (startHTML && typeof startHTML !== \"string\") {\n    throw new Error(`${DOM_ERROR} 1st parameter is not a string.`);\n  }\n  if (config && !isObj(config)) {\n    throw new Error(`${DOM_ERROR} 2nd parameter is not an object.`);\n  }\n  // break the callback out of config\n  const { onNodeCallback: callback, ...rest } = config;\n  // create the root node\n  const rootNode = createDocument();\n  // set default parser options\n  const defaultOpts: ParserOptions = {\n    onNodeCallback: (node, parent) => {\n      if (typeof callback === \"function\") {\n        callback(node, parent, rootNode as RootLike & RootNode);\n      }\n      const child = addDomPrototype(node, rootNode);\n      const currentParent = isRoot(parent) ? rootNode : parent;\n      currentParent.append(child);\n\n      return child;\n    },\n    sanitizeFn: sanitizeAttrValue,\n    filterTags: [],\n    filterAttrs: [],\n  };\n\n  // parse options\n  // allow config to override all the above options\n  const options = Object.assign({}, defaultOpts, rest);\n\n  // Create parser instance\n  const { root: { charset, doctype } } = Parser(options)\n    // Parse initial HTML\n    .parseFromString(startHTML);\n\n  // transfer doctype & charset\n  Object.assign(rootNode, { charset, doctype });\n\n  return rootNode;\n};\n","// util.ts\nimport type {\n  ChildLike,\n  ChildNode,\n  DOMNode,\n  NodeLike,\n  NodeLikeAttributes,\n  RootLike,\n  RootNode,\n} from \"./types\";\n\n// general utils\n\n/**\n * Converts a string to lowercase.\n * @param str The string to convert.\n * @returns The lowercase string.\n */\nexport const toLowerCase = (str: string): string => str.toLowerCase();\n\n/**\n * Converts a string to uppercase.\n * @param str The string to convert.\n * @returns The uppercase string.\n */\nexport const toUpperCase = (str: string): string => str.toUpperCase();\n\n/**\n * Checks if a string starts with a specified prefix.\n * @param str The string to check.\n * @param prefix The prefix to search for.\n * @returns `true` if the string starts with the prefix, `false` otherwise.\n */\nexport const startsWith = (str: string, prefix: string): boolean =>\n  str.startsWith(prefix);\n\n/**\n * Checks if a string ends with a specified suffix.\n * @param str The string to check.\n * @param suffix The suffix to search for.\n * @returns `true` if the string ends with the suffix, `false` otherwise.\n */\nexport const endsWith = (str: string, suffix: string): boolean =>\n  str.endsWith(suffix);\n\n/**\n * Creates a string from a character code.\n * @param char The character code.\n * @returns The string representation of the character code.\n */\nexport const fromCharCode = (char: number): string => String.fromCharCode(char);\n\n/**\n * Returns the character code at a specific index in a string.\n * @param str The string to check.\n * @param index The index of the character to get the code for.\n * @returns The character code at the specified index.\n */\nexport const charCodeAt = (str: string, index: number): number =>\n  str.charCodeAt(index);\n\n/**\n * Defines a property on an object.\n * @param obj The object to define the property on.\n * @param propName The name of the property.\n * @param desc The property descriptor.\n * @returns The object after defining the property.\n */\n// export const defineProperty = <T extends Record<string, unknown>>(\n//   obj: T,\n//   propName: PropertyKey,\n//   desc: PropertyDescriptor,\n// ): T => Object.defineProperty(obj, propName, desc);\n\n/**\n * Defines multiple properties on an object.\n * @param obj The object to define properties on.\n * @param props An object where keys are property names and values are property descriptors.\n * @returns The object after defining the properties.\n */\nexport const defineProperties = <T extends Record<string, unknown>>(\n  obj: T,\n  props: Record<PropertyKey, PropertyDescriptor>,\n): T => Object.defineProperties(obj, props);\n\n// Type guards\n\n/**\n * Checks if a node is an object.\n * @param node The object to check.\n * @returns `true` if the node is an object, `false` otherwise.\n */\nexport const isObj = (node: unknown) =>\n  node !== null && typeof node === \"object\";\n\n/**\n * Checks if a node is a root object (`RootNode` or `RootLike`).\n * @param node The object to check.\n * @returns `true` if the node is an object, `false` otherwise.\n */\nexport const isRoot = (\n  node: RootLike | RootNode | ChildLike | ChildNode,\n): node is RootLike | RootNode =>\n  isObj(node) && isNode(node as unknown as ChildLike) &&\n  node.nodeName === \"#document\";\n\n/**\n * Checks if a node is a tag node (`NodeLike` or `DOMNode`).\n * @param node The node to check.\n * @returns `true` if the node is a tag node, `false` otherwise.\n */\nexport const isTag = (\n  node: ChildLike | ChildNode,\n): node is NodeLike | DOMNode => isObj(node) && \"tagName\" in node;\n\n/**\n * Checks if a node is a root node (`RootLike` or `RootNode`),\n * a tag node (`NodeLike` or `DOMNode`), a comment node\n * (`CommentLike` or `CommentNode`) or text node (`TextLike` or `TextNode`).\n * @param node The node to check.\n * @returns `true` if the node is a tag node, `false` otherwise.\n */\nexport const isNode = (\n  node: ChildLike | ChildNode | NodeLikeAttributes | string | number,\n): node is ChildLike | NodeLike | DOMNode => isObj(node) && \"nodeName\" in node;\n\n/**\n * Checks if a value is a primitive (number or string).\n * @param val The value to check.\n * @returns `true` if the value is a primitive, `false` otherwise.\n */\nexport const isPrimitive = <T extends (number | string)>(\n  val: unknown,\n): val is T => typeof val === \"string\" || typeof val === \"number\";\n\n/**\n * Set of self-closing HTML tags used by the `Parser`.\n */\nexport const selfClosingTags = new Set([\n  \"area\",\n  \"base\",\n  \"br\",\n  \"col\",\n  \"embed\",\n  \"hr\",\n  \"img\",\n  \"input\",\n  \"link\",\n  \"meta\",\n  \"param\",\n  \"source\",\n  \"track\",\n  \"wbr\",\n  \"path\",\n  \"circle\",\n  \"ellipse\",\n  \"line\",\n  \"rect\",\n  \"use\",\n  \"stop\",\n  \"polygon\",\n  \"polyline\",\n]);\n\nexport const DOM_ERROR = \"DomError:\";\nexport const PARSER_ERROR = \"ParserError:\";\n","import type {\n  ChildLike,\n  CommentLike,\n  DOMNode,\n  GetAttributesOptions,\n  HTMLToken,\n  NodeLike,\n  NodeLikeAttributes,\n  ParseResult,\n  ParserOptions,\n  RootLike,\n  TextLike,\n} from \"./types\";\n\nimport {\n  charCodeAt,\n  endsWith,\n  fromCharCode,\n  isTag,\n  selfClosingTags,\n  startsWith,\n  toLowerCase,\n  toUpperCase,\n} from \"./util\";\n\n/**\n * Get attributes from a string token and return an object\n * @param tagStr the string token\n * @param config an optional set of options\n * @returns the attributes object\n */\nexport const getAttributes = (\n  tagStr: string,\n  config?: Partial<GetAttributesOptions>,\n): NodeLikeAttributes => {\n  const { sanitizeFn, unsafeAttrs } = config || {};\n  const attrs: NodeLikeAttributes = {};\n  const parts = tagStr.split(/\\s+/);\n  if (parts.length < 2) return attrs;\n\n  const attrStr = tagStr.slice(parts[0].length);\n  const attrRegex = /([^\\s=]+)(?:=(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"']+)))?/g;\n  let match: RegExpExecArray | null;\n\n  while ((match = attrRegex.exec(attrStr))) {\n    const [, name, d, s, u] = match;\n    const value = d ?? s ?? u ?? \"\";\n    if (name && name !== \"/\" && (!unsafeAttrs?.has(toLowerCase(name)))) {\n      attrs[name] = sanitizeFn ? sanitizeFn(toLowerCase(name), value) : value;\n    }\n  }\n\n  return attrs;\n};\n\n/**\n * Tokenizes an HTML string into an array of HTML tokens.\n * These tokens represent opening tags, closing tags, text content, and comments.\n * @param html The HTML string to tokenize.\n * @returns An array of `HTMLToken` objects.\n */\nexport const tokenize = (html: string): HTMLToken[] => {\n  const tokens: HTMLToken[] = [];\n  let token = \"\",\n    inTag = false,\n    inQuote = false,\n    quote = 0,\n    isComment = false;\n\n  for (let i = 0; i < html.length; i++) {\n    const char = charCodeAt(html, i);\n\n    if (isComment) {\n      token += fromCharCode(char);\n      if (endsWith(token, \"--\")) {\n        /* istanbul ignore else @preserve */\n        if (charCodeAt(html, i + 1) === 62 /* > */) {\n          tokens.push({\n            nodeType: \"comment\",\n            value: token.trim(),\n            isSC: false,\n          });\n          token = \"\";\n          isComment = false;\n          i++;\n        }\n      }\n      continue;\n    }\n\n    if (inTag && (char === 34 || char === 39)) { // \" or ' | 0x22 or 0x27\n      if (!inQuote) {\n        quote = char;\n        inQuote = true;\n      } else if (char === quote) inQuote = false;\n      token += fromCharCode(char);\n      continue;\n    }\n\n    if (char === 60 /* 0x3c */ && !inQuote) { // <\n      token.trim() && tokens.push({\n        nodeType: \"text\",\n        // value: encodeEntities(token.trim()),\n        value: (token.trim()),\n        isSC: false,\n      });\n      token = \"\";\n      inTag = true;\n      if (\n        charCodeAt(html, i + 1) === 33 /* ! | 0x21 */ &&\n        charCodeAt(html, i + 2) === 45 /* - | 0x2d */ &&\n        charCodeAt(html, i + 3) === 45 /* - | 0x2d */\n      ) {\n        isComment = true;\n        token += \"!--\";\n        i += 3;\n        continue;\n      }\n    } else if (char === 62 /* 0x3e */ && !inQuote && inTag && !isComment) { // > | 0x3e\n      /* istanbul ignore else @preserve */\n      if (token) {\n        const isSC = endsWith(token, \"/\");\n        const isDocType = startsWith(token, \"!doctype\");\n\n        tokens.push({\n          nodeType: isDocType ? \"doctype\" : \"tag\",\n          value: isSC ? token.slice(0, -1).trim() : token.trim(),\n          isSC,\n        });\n      }\n      token = \"\";\n      inTag = false;\n    } else {\n      token += fromCharCode(char);\n    }\n  }\n\n  token.trim() && tokens.push({\n    nodeType: \"text\",\n    // value: encodeEntities(token.trim()),\n    value: (token.trim()),\n    isSC: false,\n  });\n  return tokens;\n};\n\n/**\n * **Parser**\n *\n * A tiny yet very fast and powerful parser that\n * takes a string of HTML and returns a DOM tree representation.\n *\n * **Features**\n * * The **Parser** is around 1.2Kb and is optimized for speed and memory efficiency.\n * * It handles basic HTML elements, custom elements, UI frameworks components,\n * special attributes, and text and comment nodes.\n * * It provides sanitization options for specific attributes\n * and options to filter tags and unsafe attributes; _by default the filters are empty_.\n * * You can make use of its sanitization tools in your application or use any\n * sanitization at your disposal.\n *\n * The DOM representation is a plain object with the following structure:\n * ```ts\n *  type CommentLike = {\n *   nodeName: \"#comment\";\n *   nodeValue: string;\n * };\n *  type TextLike = {\n *   nodeName: \"#text\";\n *   nodeValue: string;\n * };\n *  type NodeLike = {\n *   tagName: string;\n *   nodeName: string;\n *   attributes: Record<string, string>;\n *   children: NodeLike[];\n *   childNodes: (NodeLike | TextLike | CommentLike)[];\n * };\n *  type RootLike = {\n *   nodeName: string;\n *   doctype?: string;\n *   all: NodeLike[];\n *   children: NodeLike[];\n *   childNodes: (NodeLike | TextLike | CommentLike)[];\n * };\n * ```\n *\n * @example\n * ```ts\n * const config = {\n *   // Sanitize function\n *   sanitizeFn?: myFunction(attrName: string, attrValue: string) => string,\n *   // Callback on new nodes\n *   onNodeCallback?: myFunction(node: NodeLike) => void,\n *   // Common dangerous tags that could lead to XSS attacks\n *   filterTags: [\n *     \"script\", \"style\", \"iframe\", \"object\", \"embed\", \"base\", \"form\",\n *     \"input\", \"button\", \"textarea\", \"select\", \"option\"\n *   ],\n *   // Unsafe attributes that could lead to XSS attacks\n *   filterAttrs: [\n *     \"onerror\", \"onload\", \"onunload\", \"onclick\", \"ondblclick\", \"onmousedown\",\n *     \"onmouseup\", \"onmouseover\", \"onmousemove\", \"onmouseout\", \"onkeydown\",\n *     \"onkeypress\", \"onkeyup\", \"onchange\", \"onsubmit\", \"onreset\", \"onselect\",\n *     \"onblur\", \"onfocus\", \"formaction\", \"href\", \"xlink:href\", \"action\"\n *   ]\n * }\n * const parser = Parser(config);\n * const { root, components, tags } = parser.parseFromString(\"<h1>Title</h1>\");\n * // > \"root\" is a RootLike node, \"components\" is an array of component names, \"tags\" is an array of tag names\n * ```\n *\n * @param config an optional configuration object\n * @returns the parsed result\n */\nexport function Parser(config: Partial<ParserOptions> = {}) {\n  // Common dangerous tags that could lead to XSS\n  let unsafeTags = new Set<string>();\n\n  // Unsafe attributes that could lead to XSS\n  let unsafeAttrs = new Set<string>();\n\n  // Apply config\n  const { filterTags, filterAttrs, onNodeCallback, sanitizeFn } = config;\n  if (filterTags?.length) unsafeTags = new Set(filterTags);\n  if (filterAttrs?.length) unsafeAttrs = new Set(filterAttrs);\n  const getAttrOptions = { unsafeAttrs } as GetAttributesOptions;\n  // don't override the default function unless it's actualy set\n  if (typeof sanitizeFn === \"function\") getAttrOptions.sanitizeFn = sanitizeFn;\n\n  return {\n    parseFromString(htmlString?: string) {\n      const root: RootLike = {\n        nodeName: \"#document\",\n        childNodes: [],\n        children: [],\n        all: [],\n      };\n      if (!htmlString) return { root, components: [], tags: [] };\n\n      const stack: (RootLike | NodeLike)[] = [root];\n      const tagStack: string[] = [];\n      const components = new Set<string>();\n      const tags = new Set<string>();\n      let parentIsSafe = true;\n      let newNode: ChildLike;\n\n      const append = (\n        node: ChildLike,\n        parent: RootLike | DOMNode | NodeLike,\n      ) => {\n        // here we call the callback coming from Dom\n        // or any other parent functionality\n        // we allow that to store the DOM tree\n        if (onNodeCallback) {\n          onNodeCallback(node, parent as DOMNode, root);\n        } else {\n          if (isTag(node)) {\n            parent.children.push(node);\n            root.all.push(node);\n          }\n          parent.childNodes.push(node);\n        }\n      };\n\n      tokenize(htmlString).forEach((token) => {\n        const { nodeType, value, isSC } = token;\n        // Skip doctype, but store it as a root property\n        if (nodeType === \"doctype\") {\n          root.doctype = `<${value}>`;\n          return;\n        }\n        const currentParent = stack[stack.length - 1];\n\n        if ([\"text\", \"comment\"].includes(nodeType)) {\n          newNode = {\n            nodeName: `#${nodeType}`,\n            nodeValue: nodeType === \"text\" ? value : `<${value}>`,\n          } as TextLike | CommentLike;\n          append(newNode, currentParent);\n          return;\n        }\n\n        const isClosing = startsWith(value, \"/\");\n        const tagName = isClosing ? value.slice(1) : value.split(/[\\s/>]/)[0];\n        const tagNameLower = toLowerCase(tagName);\n        const isSelfClosing = isSC || selfClosingTags.has(tagNameLower);\n\n        // Tag Matching Detection Logic\n        if (!isSelfClosing) {\n          // Start Tag (and not self-closing)\n          if (!isClosing) {\n            // Push tag name onto the tag stack\n            tagStack.push(tagName);\n            // Closing Tag\n          } else {\n            // Pop the last opened tag\n            const expectedTag = tagStack.pop();\n            if (expectedTag !== tagName) {\n              if (expectedTag === undefined) {\n                throw new Error(\n                  `ParserError: Mismatched closing tag: </${tagName}>. No open tag found.`,\n                );\n              } else {\n                throw new Error(\n                  `ParserError: Mismatched closing tag: </${tagName}>. Expected closing tag for <${expectedTag}>.`,\n                );\n              }\n            }\n          }\n        }\n\n        // Skip unsafe tags\n        if (unsafeTags.has(tagNameLower)) {\n          if (isClosing) {\n            parentIsSafe = true;\n          } else {\n            parentIsSafe = false;\n          }\n          return;\n        }\n\n        if (!parentIsSafe) return;\n\n        // Register tag/component type\n        (tagName[0] === toUpperCase(tagName[0]) || tagName.includes(\"-\")\n          ? components\n          : tags).add(tagName);\n\n        if (!isClosing) {\n          newNode = {\n            tagName,\n            nodeName: toUpperCase(tagName),\n            attributes: getAttributes(value, getAttrOptions),\n            children: [],\n            childNodes: [],\n          } as NodeLike;\n\n          const charset = newNode.attributes?.charset;\n          if (tagName === \"meta\" && charset) {\n            root.charset = toUpperCase(charset);\n          }\n\n          append(newNode, currentParent);\n          !isSelfClosing && stack.push(newNode);\n        } else if (!isSelfClosing && stack.length > 1) {\n          stack.pop();\n        }\n      });\n\n      // Check for unclosed tags at the end\n      // actually not possible to reach this point\n      // since it throws at first mismatch\n      // if (tagStack.length > 0) {\n      //   const unclosedTag = tagStack.pop();\n      //   throw new Error(`ParserError: Unclosed tag: <${unclosedTag}>.`);\n      // }\n\n      return {\n        root,\n        components: Array.from(components),\n        tags: Array.from(tags),\n      } satisfies ParseResult;\n    },\n  };\n}\n","// selectors.ts\nimport { startsWith, toLowerCase } from \"./util\";\nimport type { DOMNode, SelectorPart } from \"./types\";\n\n// Selector RegExp\nconst SELECTOR_REGEX = /([.#]?[\\w-]+|\\[[\\w-]+(?:=[^\\]]+)?\\])+/g;\n\n/**\n * Parses a CSS selector string into an array of selector parts.\n * Each part represents a segment of the selector (e.g., tag name, class, id, attribute).\n * @param selector The CSS selector string to parse.\n * @returns An array of `SelectorPart` objects representing the parsed selector.\n */\nconst parseSelector = (selector: string): SelectorPart[] => {\n  const parts: SelectorPart[] = [];\n  const matches =\n    selector.match(SELECTOR_REGEX) || /* istanbul ignore next @preserve */ [];\n\n  for (const match of matches) {\n    if (startsWith(match, \"#\")) {\n      parts.push({ type: \"#\", name: \"id\", value: match.slice(1) });\n    } else if (startsWith(match, \".\")) {\n      parts.push({ type: \".\", name: \"class\", value: match.slice(1) });\n    } else if (startsWith(match, \"[\")) {\n      const [name, value] = match.slice(1, -1).split(\"=\");\n      parts.push({\n        type: \"[\",\n        name,\n        value: value ? value.replace(/['\"]/g, \"\") : undefined,\n      });\n    } else {\n      parts.push({ type: \"\", name: match });\n    }\n  }\n  return parts;\n};\n\n/**\n * Checks if a node matches a single CSS selector.\n * @param node The `DOMNode` object to test against the selector.\n * @param selector The CSS selector string.\n * @returns `true` if the node matches the selector, `false` otherwise.\n */\nconst matchesSingleSelector = (node: DOMNode, selector: string): boolean => {\n  const parts = parseSelector(selector);\n\n  return parts.every((part) => {\n    switch (part.type) {\n      case \"#\": {\n        return node.attributes.get(\"id\") === part.value;\n      }\n      case \".\": {\n        const classes = node.attributes.get(\"class\")?.split(/\\s+/) || [];\n        return classes.includes(part.value as string);\n      }\n      case \"[\": {\n        const attrValue = node.attributes.get(part.name);\n        return part.value ? attrValue === part.value : attrValue !== undefined;\n      }\n      default: {\n        return toLowerCase(node.tagName) === toLowerCase(part.name);\n      }\n    }\n  });\n};\n\n/**\n * Checks if a node matches one or mode CSS selectors.\n * @param node The `DOMNode` object to test against the selector.\n * @param selector The CSS selector string.\n * @returns `true` if the node matches the selector, `false` otherwise.\n */\nexport const matchesSelector = (node: DOMNode, selector: string): boolean => {\n  // Split by commas and trim each selector\n  const selectors = selector.split(\",\").map((s) => s.trim());\n\n  // Node matches if it matches any of the individual selectors\n  return selectors.some((simpleSelector) =>\n    matchesSingleSelector(node, simpleSelector)\n  );\n};\n","// prototype.ts\nimport { tokenize } from \"./parser\";\nimport { matchesSelector } from \"./selectors\";\nimport {\n  defineProperties,\n  isNode,\n  isObj,\n  isPrimitive,\n  isRoot,\n  isTag,\n  selfClosingTags,\n  toUpperCase,\n} from \"./util\";\nimport type {\n  ChildElementList,\n  ChildLike,\n  ChildNode,\n  ChildNodeList,\n  CommentNode,\n  DOMNode,\n  MaybeChildNode,\n  NodeLikeAttributes,\n  RootNode,\n  TagNames,\n  TextNode,\n  TextToken,\n} from \"./types\";\n\n/**\n * Generates text string from node's children textContent.\n * @param node The node whose children to stringify\n * @returns textContent string\n */\nconst textContent = (node: ChildNode): string => {\n  if (!isTag(node)) return node.nodeValue;\n  const { childNodes } = node;\n  if (!childNodes.length) return \"\";\n\n  return childNodes.map((n) =>\n    isTag(n) ? textContent(n as unknown as DOMNode) : n.nodeValue\n  ).join(\"\\n\");\n};\n\n/**\n * Generates HTML string for node's children\n * @param node The node whose children to stringify\n * @param depth Current indentation depth\n * @returns innerHTML string\n */\nconst innerHTML = ({ childNodes }: DOMNode, depth = 0): string => {\n  if (!childNodes.length) return \"\";\n\n  const childIsText = childNodes.length === 1 && !isTag(childNodes[0]);\n  const space = depth && !childIsText ? \"  \".repeat(depth) : \"\";\n\n  return childNodes\n    .map((n) =>\n      isTag(n) ? outerHTML(n as unknown as DOMNode, depth) : space + n.nodeValue\n    )\n    .join(\"\\n\");\n};\n\n/**\n * Generates HTML string for a node including its opening/closing tags\n * @param node The node to stringify\n * @param depth Current indentation depth\n * @returns outerHTML string\n */\nconst outerHTML = (node: DOMNode, depth = 0): string => {\n  const space = depth ? \"  \".repeat(depth) : \"\";\n  const { attributes, tagName, childNodes } = node;\n  const hasChildren = childNodes.length > 0;\n  const childIsText = childNodes.length === 1 && !isTag(childNodes[0]);\n  const hasAttributes = attributes.size > 0;\n  const isSelfClosing = selfClosingTags.has(tagName);\n\n  const attrStr = hasAttributes\n    ? \" \" + Array.from(attributes)\n      .map(([key, val]) => `${key}=\"${val}\"`)\n      .join(\" \")\n    : \"\";\n\n  // add doctype?\n  // let output = tagName === \"html\" ? \"<!doctype html>\\n\" : \"\";\n  let output = `${space}<${tagName}${attrStr}${isSelfClosing ? \" /\" : \"\"}>`;\n  output += hasChildren && !childIsText ? \"\\n\" : \"\";\n  output += hasChildren ? innerHTML(node, depth + 1) : \"\";\n  output += !childIsText && hasChildren ? `\\n${space}` : \"\";\n  output += !isSelfClosing ? `</${tagName}>` : \"\";\n\n  return output;\n};\n\n/**\n * Creates a basic text or comment node.\n * @param nodeName The node name (\"#text\" or \"#comment\").\n * @param text The text content of the node.\n * @returns A TextNode or CommentNode object.\n */\nexport function createBasicNode<T extends (\"#text\" | \"#comment\")>(\n  nodeName: T,\n  text: string,\n): TextNode | CommentNode {\n  return {\n    nodeName,\n    nodeValue: nodeName === \"#comment\" ? `<!-- ${text} -->` : text,\n  } as (TextNode | CommentNode);\n}\n\n/**\n * Creates a DOM-like Node (`DOMNode` or `RootNode`) with DOM API extensions and sanitization.\n * This function extends the basic `NodeLike` from **Parser** by adding DOM-specific properties and methods,\n * as well as applying sanitization based on the provided configuration.\n *\n * @param this - The `RootNode` when creating a `DOMNode`, or `null` otherwise (in non-strict mode)\n * @param nodeName The tag name of the node to create (or '#document' for the root).\n * @param childNodes Optional child nodes to append to the created node.\n * @returns An extended `DOMNode` or `RootNode` object with DOM API.\n */\nexport function createNode(\n  this: RootNode | null,\n  nodeName: string,\n  ...childNodes: ChildNodeList\n): Omit<DOMNode, \"tagName\" | \"attributes\"> | RootNode {\n  const ALL: ChildElementList = [];\n  const CHILDREN: ChildElementList = [];\n  const CHILDNODES: ChildNodeList = [];\n  const nodeIsRoot = nodeName === \"#document\";\n  const ownerDocument = this ?? undefined;\n\n  const node = {\n    nodeName,\n    append(...nodes: ChildNodeList) {\n      for (const child of nodes) {\n        CHILDNODES.push(child);\n        if (isTag(child)) {\n          ALL.push(child);\n          CHILDREN.push(child);\n          ownerDocument?.register(child);\n\n          // Add HTML generation methods\n          defineProperties(child, {\n            innerHTML: {\n              enumerable: false,\n              get: () => innerHTML(child),\n            },\n            outerHTML: {\n              enumerable: false,\n              get: () => outerHTML(child),\n            },\n          });\n        }\n\n        defineProperties(child, {\n          // Add text generation methods\n          innerText: {\n            enumerable: false,\n            get: () => textContent(child),\n          },\n          textContent: {\n            enumerable: false,\n            get: () => textContent(child),\n          },\n          // Add node relationship properties\n          parentNode: {\n            enumerable: false,\n            get: () => node,\n          },\n          ownerDocument: {\n            enumerable: false,\n            get: () => ownerDocument,\n          },\n        });\n\n        child.remove = () => {\n          node.removeChild(child);\n        };\n      }\n    },\n\n    // Root document methods\n    ...(isRoot({ nodeName } as RootNode) && {\n      createElement(\n        tagName:\n          & string\n          & (keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap),\n        first?: NodeLikeAttributes | MaybeChildNode,\n        ...rest: MaybeChildNode[]\n      ) {\n        return createElement.call(\n          node as RootNode,\n          tagName,\n          first,\n          ...rest,\n        );\n      },\n      createElementNS(\n        _ns: string,\n        tagName:\n          & string\n          & (keyof SVGElementTagNameMap & keyof HTMLElementTagNameMap),\n        first?: NodeLikeAttributes | MaybeChildNode,\n        ...rest: MaybeChildNode[]\n      ) {\n        return createElement.call(node as RootNode, tagName, first, ...rest);\n      },\n      createComment(content: string) {\n        return createBasicNode(\"#comment\", content);\n      },\n      createTextNode(content: string) {\n        return createBasicNode(\"#text\", content);\n      },\n      getElementById(id: string) {\n        return ALL.find((node) => node.attributes.get(\"id\") === id) ?? null;\n      },\n    }),\n\n    // Element methods\n    ...((!nodeIsRoot) && {\n      matches(selector: string) {\n        return matchesSelector(node as unknown as DOMNode, selector);\n      },\n    }),\n    // Shared methods\n    contains: (childNode: DOMNode) => {\n      if (!childNode || !isTag(childNode)) {\n        throw new Error(\n          \"DomError: the childNode parameter must be a valid DOMNode\",\n        );\n      }\n      if ((node as DOMNode | RootNode).children.includes(childNode)) {\n        return true;\n      }\n\n      let currentParent = childNode.parentNode;\n      while (currentParent) {\n        if (currentParent === node) {\n          return true;\n        }\n        currentParent = currentParent.parentNode;\n      }\n      return false;\n    },\n    removeChild(childNode: ChildNode) {\n      if (!childNode || !isNode(childNode)) {\n        throw new Error(\n          \"DomError: the childNode parameter must be a valid ChildNode\",\n        );\n      }\n\n      const indexOf = (arr: ChildNode[]) => arr.indexOf(childNode);\n      /* istanbul ignore else @preserve */\n      if (isTag(childNode)) {\n        const idx1 = indexOf(ALL);\n        const idx2 = indexOf(CHILDREN);\n        /* istanbul ignore else @preserve */\n        if (idx1 > -1) ALL.splice(idx1, 1);\n        /* istanbul ignore else @preserve */\n        if (idx2 > -1) CHILDREN.splice(idx2, 1);\n\n        ownerDocument?.deregister(childNode);\n      }\n\n      const idx3 = indexOf(CHILDNODES);\n      /* istanbul ignore else @preserve */\n      if (idx3 > -1) CHILDNODES.splice(idx3, 1);\n    },\n    replaceChildren: (...newChildren: DOMNode[]) => {\n      // clone this array to work\n      CHILDNODES.slice(0).forEach((childNode) => node.removeChild(childNode));\n      node.append(...newChildren);\n    },\n    querySelector(selector: string) {\n      return ALL.find((node) => node.matches(selector)) ?? null;\n    },\n    querySelectorAll(selector: string) {\n      return ALL.filter((node) => node.matches(selector));\n    },\n    getElementsByTagName(tagName: string) {\n      return tagName === \"*\"\n        ? ALL\n        : ALL.filter((node) =>\n          node.tagName.toLowerCase() === tagName.toLowerCase()\n        );\n    },\n    getElementsByClassName(className: string) {\n      return ALL.filter((node) => {\n        const classAttr = node.attributes.get(\"class\");\n        return classAttr?.split(/\\s+/).includes(className) ?? false;\n      });\n    },\n  };\n\n  // Define enumerable getters\n  defineProperties(node, {\n    childNodes: {\n      enumerable: true,\n      get: () => CHILDNODES,\n    },\n    children: {\n      enumerable: true,\n      get: () => CHILDREN,\n    },\n  });\n\n  // Add root-specific properties\n  if (nodeIsRoot) {\n    defineProperties(node, {\n      all: {\n        enumerable: true,\n        get: () => ALL,\n      },\n      documentElement: {\n        enumerable: true,\n        get: () => ALL.find((node) => toUpperCase(node.tagName) === \"HTML\"),\n      },\n      head: {\n        enumerable: true,\n        get: () => ALL.find((node) => toUpperCase(node.tagName) === \"HEAD\"),\n      },\n      body: {\n        enumerable: true,\n        get: () => ALL.find((node) => toUpperCase(node.tagName) === \"BODY\"),\n      },\n      register: {\n        enumerable: false,\n        value: (child: DOMNode) => {\n          ALL.push(child);\n        },\n      },\n      deregister: {\n        enumerable: false,\n        value: (child: DOMNode) => {\n          const idx = ALL.indexOf(child);\n          /* istanbul ignore else @preserve */\n          if (idx > -1) ALL.splice(idx, 1);\n        },\n      },\n    });\n  }\n\n  // Add any initial children\n  if (childNodes?.length) {\n    node.append(...childNodes);\n  }\n\n  return node as unknown as RootNode | Omit<DOMNode, \"tagName\" | \"attributes\">;\n}\n\nconst convertToNode = (n: string | number | ChildNode) => {\n  if (isPrimitive(n)) {\n    const { nodeType, value } = tokenize(String(n))[0] as TextToken;\n    return createBasicNode(`#${nodeType}`, value.replace(/!--|--/g, \"\").trim());\n  }\n  return n;\n};\n\n/**\n * Creates a new `Element` like node\n * @param this The RootNode instance\n * @param tagName Tag name for the element\n * @param first Optional attributes or first child\n * @param args Additional child nodes\n * @returns New element node\n */\nexport function createElement(\n  this: RootNode,\n  tagName: string & TagNames,\n  first?: NodeLikeAttributes | MaybeChildNode,\n  ...args: MaybeChildNode[]\n): DOMNode {\n  const childNodes: ChildNodeList = [];\n  let attributes = new Map<string, string>();\n\n  // Handle first argument\n  /* istanbul ignore else @preserve */\n  if (first) {\n    if (isObj(first) && !isNode(first)) {\n      // Convert attributes object to Map\n      attributes = new Map(Object.entries(first));\n    } else {\n      childNodes.push(convertToNode(first as string | number | ChildNode));\n    }\n  }\n\n  // Add remaining children\n  const nodes = args.map(convertToNode).filter(isNode);\n  childNodes.push(...nodes);\n\n  const node = createNode.call(\n    this,\n    tagName.toUpperCase(),\n    ...childNodes,\n  ) as DOMNode;\n\n  const charset = attributes.get(\"charset\");\n  if (tagName === \"meta\" && charset) {\n    this.charset = toUpperCase(charset);\n  }\n\n  defineProperties(node, {\n    tagName: {\n      enumerable: true,\n      get: () => tagName,\n    },\n    attributes: {\n      enumerable: true,\n      get: () => attributes,\n    },\n  });\n  // define Element attributes methods\n  node.hasAttribute = (attrName) => attributes.has(attrName);\n  node.getAttribute = (attrName) => attributes.get(attrName) ?? null;\n  node.setAttribute = (attrName, attrValue) => {\n    attributes.set(attrName, attrValue);\n  };\n  node.hasAttributeNS = (_namespace, attrName) => attributes.has(attrName);\n  node.getAttributeNS = (_namespace, attrName) =>\n    attributes.get(attrName) ?? null;\n  node.setAttributeNS = (_namespace, attrName, attrValue) => {\n    attributes.set(attrName, attrValue);\n  };\n  // define Element parent selector\n  node.closest = (selector: string) => {\n    if (!selector) throw new Error(\"DomError: selector must be a string\");\n    if (node.matches(selector)) return node;\n    let currentParent = node.parentNode;\n    while (!isRoot(currentParent)) {\n      if (currentParent.matches(selector)) {\n        return currentParent;\n      }\n      currentParent = currentParent.parentNode;\n    }\n    return null;\n  };\n\n  return node;\n}\n\n/**\n * Enhances a node with DOM-like properties and methods\n * @param node The node to enhance\n * @param ownerDocument The root document\n */\nexport const addDomPrototype = (\n  node: ChildNode | ChildLike,\n  ownerDocument: RootNode,\n): ChildNode => {\n  // if (isNode(node) && \"parentNode\" in node) return node;\n  if (isTag(node)) {\n    const { tagName, attributes, childNodes } = node;\n    const newNode = createElement.call(\n      ownerDocument,\n      tagName,\n      attributes as NodeLikeAttributes,\n    );\n    newNode.append(...childNodes as ChildNodeList);\n    return Object.assign(node, newNode);\n  } else {\n    const { nodeName, nodeValue } = node;\n\n    return Object.assign(node, {\n      ...createBasicNode(nodeName, nodeValue),\n    }) as TextNode | CommentNode;\n  }\n};\n\n/**\n * Creates a new `Document` like root node.\n *\n * @returns a new root node\n */\nexport const createDocument = () =>\n  createNode.call(null, \"#document\") as RootNode;\n","// sanitize.ts\nimport { endsWith, toLowerCase } from \"./util\";\n\n/**\n * A basic tool for HTML entities encoding.\n * Encodes HTML entities like &, <, >, \", and '.\n * @param str The source string to encode.\n * @returns The encoded string.\n */\nexport const encodeEntities = (str: string): string =>\n  str.replace(/[&<>\"']/g, (char) => ({\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#39;\",\n  }[char] || /* istanbul ignore next @preserve */ char));\n\n/**\n * Sanitizes a URL to prevent XSS vulnerabilities.\n * Removes potentially dangerous URL schemes like javascript:, data:, and vbscript:.\n * @param url The URL to sanitize.\n * @returns The sanitized URL, or an empty string if the URL is unsafe.\n */\nexport const sanitizeUrl = (url: string): string => {\n  const decoded = decodeURIComponent(url.trim());\n  if (/^(?:javascript|data|vbscript):/i.test(decoded)) return \"\";\n  return encodeEntities(decoded);\n};\n\n/**\n * Sanitizes HTML attribute values to prevent XSS vulnerabilities.\n * Encodes HTML entities and sanitizes URLs for specific attributes like src, href, action,\n * formaction, and attributes ending with 'url'.\n * @param attrName The attribute name.\n * @param initialValue The attribute value to sanitize.\n * @returns The sanitized attribute value.\n */\nexport const sanitizeAttrValue = (\n  attrName: string,\n  initialValue: string,\n): string => {\n  if (!initialValue) return \"\";\n  const name = toLowerCase(attrName);\n  const value = initialValue.trim();\n\n  if (\n    name === \"src\" ||\n    name === \"href\" ||\n    name === \"action\" ||\n    name === \"formaction\" ||\n    endsWith(name, \"url\")\n  ) {\n    return sanitizeUrl(value);\n  }\n\n  return encodeEntities(value);\n};\n"],"mappings":"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","names":["node"]}