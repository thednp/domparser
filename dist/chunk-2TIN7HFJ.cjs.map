{"version":3,"sources":["/home/artae/Work/Github/domparser/dist/chunk-2TIN7HFJ.cjs","../src/parts/parser.ts"],"names":[],"mappings":"AAAA;AACE;AACA;AACA;AACA;AACA;AACF,wDAA6B;AAC7B;AACA;ACyBO,SAAS,MAAA,CAAA,EAAS;AACvB,EAAA,OAAO;AAAA,IACL,eAAA,CAAgB,UAAA,EAAkC;AAChD,MAAA,MAAM,KAAA,EAAiB,EAAE,QAAA,EAAU,WAAA,EAAa,QAAA,EAAU,CAAC,EAAE,CAAA;AAC7D,MAAA,GAAA,CAAI,CAAC,UAAA,EAAY,OAAO,EAAE,IAAA,EAAM,IAAA,EAAM,CAAC,CAAA,EAAG,UAAA,EAAY,CAAC,EAAE,CAAA;AAEzD,MAAA,MAAM,MAAA,EAAiC,CAAC,IAAI,CAAA;AAC5C,MAAA,MAAM,WAAA,kBAAa,IAAI,GAAA,CAAY,CAAA;AACnC,MAAA,MAAM,KAAA,kBAAO,IAAI,GAAA,CAAY,CAAA;AAC7B,MAAA,MAAM,OAAA,EAAS,wCAAA,UAAmB,CAAA;AAClC,MAAA,MAAM,KAAA,EAAO,MAAA,CAAO,MAAA;AAEpB,MAAA,IAAA,CAAA,IAAS,EAAA,EAAI,CAAA,EAAG,EAAA,EAAI,IAAA,EAAM,EAAA,GAAK,CAAA,EAAG;AAChC,QAAA,MAAM,EAAE,SAAA,EAAW,KAAA,EAAO,KAAK,EAAA,EAAI,MAAA,CAAO,CAAC,CAAA;AAC3C,QAAA,MAAM,cAAA,EAAgB,KAAA,CAAM,KAAA,CAAM,OAAA,EAAS,CAAC,CAAA;AAC5C,QAAA,GAAA,CAAI,UAAA,IAAc,SAAA,EAAW,QAAA;AAE7B,QAAA,GAAA,CAAI,CAAC,MAAA,EAAQ,SAAS,CAAA,CAAE,QAAA,CAAS,SAAS,CAAA,EAAG;AAC3C,UAAA,aAAA,CAAc,QAAA,CAAS,IAAA;AAAA,YACrB;AAAA,cACE,QAAA,EAAU,CAAA,CAAA,EAAI,SAAS,CAAA,CAAA;AACZ,cAAA;AACb,YAAA;AACF,UAAA;AACA,UAAA;AACF,QAAA;AAEwB,QAAA;AACI,QAAA;AACP,QAAA;AAEnB,QAAA;AAG0B,QAAA;AAKZ,QAAA;AACS,UAAA;AACrB,YAAA;AACsB,YAAA;AACV,YAAA;AACD,YAAA;AACb,UAAA;AAE4B,UAAA;AACJ,UAAA;AACG,QAAA;AACjB,UAAA;AACZ,QAAA;AACF,MAAA;AAEO,MAAA;AACL,QAAA;AACuB,QAAA;AACF,QAAA;AACvB,MAAA;AACF,IAAA;AACF,EAAA;AACF;ADpCsC;AACA;AACA;AACA","file":"/home/artae/Work/Github/domparser/dist/chunk-2TIN7HFJ.cjs","sourcesContent":[null,"// parser.ts\nimport {\n  getBaseAttributes,\n  selfClosingTags,\n  tokenize,\n  toLowerCase,\n  toUpperCase,\n} from \"./util.ts\";\nimport type {\n  CommentLike,\n  NodeLike,\n  ParseResult,\n  RootLike,\n  TextLike,\n} from \"./types\";\n\n/**\n * **Parser**\n *\n * A tiny yet very fast and powerful parser that takes a string of HTML\n * and returns a DOM tree representation. In benchmarks it shows up to\n * 60x faster performance when compared to jsdom.\n *\n * @example\n * ```ts\n * const { root, components, tags } = Parser().parseFromString(\"<h1>Title</h1>\");\n * // > \"root\" is a RootLike node,\n * // > \"components\" is an array of component names,\n * // > \"tags\" is an array of tag names.\n * ```\n *\n * @returns The result of the parser.\n */\nexport function Parser() {\n  return {\n    parseFromString(htmlString?: string): ParseResult {\n      const root: RootLike = { nodeName: \"#document\", children: [] };\n      if (!htmlString) return { root, tags: [], components: [] };\n\n      const stack: (RootLike | NodeLike)[] = [root];\n      const components = new Set<string>();\n      const tags = new Set<string>();\n      const tokens = tokenize(htmlString);\n      const tLen = tokens.length;\n\n      for (let i = 0; i < tLen; i += 1) {\n        const { tokenType, value, isSC } = tokens[i];\n        const currentParent = stack[stack.length - 1];\n        if (tokenType === \"doctype\") continue;\n\n        if ([\"text\", \"comment\"].includes(tokenType)) {\n          currentParent.children.push(\n            {\n              nodeName: `#${tokenType}`,\n              nodeValue: value,\n            } as CommentLike | TextLike,\n          );\n          continue;\n        }\n\n        const isClosing = value.startsWith(\"/\");\n        const tagName = isClosing ? value.slice(1) : value.split(/[\\s/>]/)[0];\n        const tagNameLower = toLowerCase(tagName);\n        const isSelfClosing = isSC ||\n          selfClosingTags.has(tagNameLower);\n\n        // Register tag type\n        (tagName[0] === toUpperCase(tagName[0]) ||\n            tagName.includes(\"-\")\n          ? components\n          : tags).add(tagName);\n\n        if (!isClosing) {\n          const node: NodeLike = {\n            tagName,\n            nodeName: toUpperCase(tagName),\n            attributes: getBaseAttributes(value),\n            children: [],\n          };\n\n          currentParent.children.push(node);\n          !isSelfClosing && stack.push(node);\n        } else if (!isSelfClosing && stack.length > 1) {\n          stack.pop();\n        }\n      }\n\n      return {\n        root,\n        components: Array.from(components),\n        tags: Array.from(tags),\n      };\n    },\n  };\n}\n"]}